import {
  require_warning
} from "./chunk-P3RUMUTE.js";
import {
  require_react
} from "./chunk-FG7OBDXQ.js";
import "./chunk-UQHSJDYI.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/react-compound-slider/dist/rcs.esm.js
var import_warning = __toESM(require_warning());
var import_react = __toESM(require_react());

// node_modules/d3-array/src/ascending.js
function ascending_default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector_default(f) {
  let delta = f;
  let compare3 = f;
  if (f.length === 1) {
    delta = (d, x) => f(d) - x;
    compare3 = ascendingComparator(f);
  }
  function left(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare3(a[mid], x) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare3(a[mid], x) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }
  return { left, center, right };
}
function ascendingComparator(f) {
  return (d, x) => ascending_default(f(d), x);
}

// node_modules/d3-array/src/number.js
function number_default(x) {
  return x === null ? NaN : +x;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector_default(number_default).center;

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks_default(start, stop, count2) {
  var reverse2, i = -1, n, ticks, step;
  stop = +stop, start = +start, count2 = +count2;
  if (start === stop && count2 > 0)
    return [start];
  if (reverse2 = stop < start)
    n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count2)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start / step), r1 = Math.round(stop / step);
    if (r0 * step < start)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step), r1 = Math.round(stop * step);
    if (r0 / step < start)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks[i] = (r0 + i) / step;
  }
  if (reverse2)
    ticks.reverse();
  return ticks;
}
function tickIncrement(start, stop, count2) {
  var step = (stop - start) / Math.max(0, count2), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

// node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array2, i0 = 0, i1 = array2.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i = random() * m-- | 0, t = array2[m + i0];
      array2[m + i0] = array2[i + i0];
      array2[i + i0] = t;
    }
    return array2;
  };
}

// node_modules/react-compound-slider/dist/rcs.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var prfx = "react-compound-slider:";
function getSortByVal() {
  var reversed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  return function sortByVal(a, b) {
    if (a.val > b.val) {
      return reversed ? -1 : 1;
    }
    if (b.val > a.val) {
      return reversed ? 1 : -1;
    }
    return 0;
  };
}
function getUpdatedHandles(handles, updateKey, updateValue) {
  var reversed = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var index2 = handles.findIndex(function(v) {
    return v.key === updateKey;
  });
  if (index2 !== -1) {
    var _handles$index = handles[index2], key = _handles$index.key, val = _handles$index.val;
    if (val === updateValue) {
      return handles;
    }
    return [].concat(_toConsumableArray(handles.slice(0, index2)), [{
      key,
      val: updateValue
    }], _toConsumableArray(handles.slice(index2 + 1))).sort(getSortByVal(reversed));
  }
  return handles;
}
function getSliderDomain(slider, vertical) {
  if (!slider) {
    return [0, 0];
  }
  var s = slider.getBoundingClientRect();
  var d0 = vertical ? s.top : s.left;
  var d1 = vertical ? s.bottom : s.right;
  return [d0, d1];
}
function isNotValidTouch(_ref) {
  var _ref$type = _ref.type, type = _ref$type === void 0 ? "" : _ref$type, touches = _ref.touches;
  return !touches || touches.length > 1 || type.toLowerCase() === "touchend" && touches.length > 0;
}
function getTouchPosition(vertical, e) {
  return vertical ? e.touches[0].clientY : e.touches[0].pageX;
}
function getHandles() {
  var values = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var reversed = arguments.length > 1 ? arguments[1] : void 0;
  var valueToStep = arguments.length > 2 ? arguments[2] : void 0;
  var warn = arguments.length > 3 ? arguments[3] : void 0;
  var changes = 0;
  var handles = values.map(function(x) {
    var val = valueToStep.getValue(x);
    if (x !== val) {
      changes += 1;
      (0, import_warning.default)(!warn, "".concat(prfx, " Invalid value encountered. Changing ").concat(x, " to ").concat(val, "."));
    }
    return val;
  }).map(function(val, i) {
    return {
      key: "$$-".concat(i),
      val
    };
  }).sort(getSortByVal(reversed));
  return {
    handles,
    changes
  };
}
function mode1(_, next) {
  return next;
}
function mode2(curr, next) {
  for (var i = 0; i < curr.length; i++) {
    if (curr[i].key !== next[i].key) {
      return curr;
    }
    if (next[i + 1] && next[i].val === next[i + 1].val) {
      return curr;
    }
  }
  return next;
}
function mode3(curr, next, step, reversed, getValue) {
  var indexForMovingHandle = -1;
  var handleMoveIsPositive = true;
  for (var i = 0; i < curr.length; i++) {
    var c = curr[i];
    var n = next[i];
    if (!n || n.key !== c.key) {
      return curr;
    } else if (n.val !== c.val) {
      indexForMovingHandle = i;
      handleMoveIsPositive = n.val - c.val > 0;
    }
  }
  if (indexForMovingHandle === -1) {
    return curr;
  } else {
    var increment = handleMoveIsPositive ? step : -step;
    for (var _i = 0; _i < next.length; _i++) {
      var n0 = next[_i];
      var n1 = next[_i + 1];
      if (n1 && n0.val === n1.val) {
        if (_i === indexForMovingHandle) {
          var newStep = n1.val + increment;
          if (getValue(newStep) === newStep) {
            var clone = getUpdatedHandles(next, n1.key, n1.val + increment, reversed);
            var check = mode3(next, clone, step, reversed, getValue);
            if (check === next) {
              return curr;
            } else {
              return check;
            }
          } else {
            return curr;
          }
        } else {
          var _newStep = n0.val + increment;
          if (getValue(_newStep) === _newStep) {
            var _clone = getUpdatedHandles(next, n0.key, n0.val + increment, reversed);
            var _check = mode3(next, _clone, step, reversed, getValue);
            if (_check === next) {
              return curr;
            } else {
              return _check;
            }
          } else {
            return curr;
          }
        }
      }
    }
  }
  return next;
}
function callAll() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(e) {
    return fns.forEach(function(fn) {
      return fn && fn(e);
    });
  };
}
var NOOP = function NOOP2() {
  return {
    value: 0,
    percent: 0
  };
};
var Rail = function(_Component) {
  _inherits(Rail2, _Component);
  var _super = _createSuper(Rail2);
  function Rail2() {
    var _this;
    _classCallCheck(this, Rail2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.getRailProps = function() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var _this$props = _this.props, emitMouse = _this$props.emitMouse, emitTouch = _this$props.emitTouch;
      return _objectSpread2(_objectSpread2({}, props), {}, {
        onMouseDown: callAll(props && props.onMouseDown, emitMouse),
        onTouchStart: callAll(props && props.onTouchStart, emitTouch)
      });
    };
    return _this;
  }
  _createClass(Rail2, [{
    key: "render",
    value: function render() {
      var getRailProps = this.getRailProps, _this$props2 = this.props, getEventData = _this$props2.getEventData, _this$props2$activeHa = _this$props2.activeHandleID, activeHandleID = _this$props2$activeHa === void 0 ? "" : _this$props2$activeHa, children = _this$props2.children;
      var renderedChildren = children({
        getEventData: getEventData || NOOP,
        activeHandleID,
        getRailProps
      });
      return renderedChildren && import_react.default.Children.only(renderedChildren);
    }
  }]);
  return Rail2;
}(import_react.Component);
var Handles = function(_Component) {
  _inherits(Handles2, _Component);
  var _super = _createSuper(Handles2);
  function Handles2() {
    var _this;
    _classCallCheck(this, Handles2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.autofocus = function(e) {
      if (e.target instanceof HTMLElement) {
        e.target.focus();
      }
    };
    _this.getHandleProps = function(id) {
      var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _this$props = _this.props, emitKeyboard = _this$props.emitKeyboard, emitMouse = _this$props.emitMouse, emitTouch = _this$props.emitTouch;
      return _objectSpread2(_objectSpread2({}, props), {}, {
        onKeyDown: callAll(props && props.onKeyDown, function(e) {
          return emitKeyboard && emitKeyboard(e, id);
        }),
        onMouseDown: callAll(props && props.onMouseDown, _this.autofocus, function(e) {
          return emitMouse && emitMouse(e, id);
        }),
        onTouchStart: callAll(props && props.onTouchStart, function(e) {
          return emitTouch && emitTouch(e, id);
        })
      });
    };
    return _this;
  }
  _createClass(Handles2, [{
    key: "render",
    value: function render() {
      var getHandleProps = this.getHandleProps, _this$props2 = this.props, _this$props2$activeHa = _this$props2.activeHandleID, activeHandleID = _this$props2$activeHa === void 0 ? "" : _this$props2$activeHa, children = _this$props2.children, _this$props2$handles = _this$props2.handles, handles = _this$props2$handles === void 0 ? [] : _this$props2$handles;
      var renderedChildren = children({
        handles,
        activeHandleID,
        getHandleProps
      });
      return renderedChildren && import_react.default.Children.only(renderedChildren);
    }
  }]);
  return Handles2;
}(import_react.Component);
var LinearScale = function() {
  function LinearScale2() {
    _classCallCheck(this, LinearScale2);
    this.interpolator = void 0;
    this.domain = [0, 1];
    this.range = [0, 1];
    this.domain = [0, 1];
    this.range = [0, 1];
    this.interpolator = null;
  }
  _createClass(LinearScale2, [{
    key: "createInterpolator",
    value: function createInterpolator(domain, range) {
      var _this = this;
      var d0 = domain[0];
      var d1 = domain[1];
      var r0 = range[0];
      var r1 = range[1];
      if (d1 < d0) {
        return function(x) {
          return _this.interpolateValue(r1, r0)(_this.deinterpolateValue(d1, d0)(x));
        };
      } else {
        return function(x) {
          return _this.interpolateValue(r0, r1)(_this.deinterpolateValue(d0, d1)(x));
        };
      }
    }
  }, {
    key: "interpolateValue",
    value: function interpolateValue(a, b) {
      return a = +a, b -= a, function i(t) {
        return a + b * t;
      };
    }
  }, {
    key: "deinterpolateValue",
    value: function deinterpolateValue(a, b) {
      return (b -= a = +a) ? function(x) {
        return (x - a) / b;
      } : function() {
        return b;
      };
    }
  }, {
    key: "rescale",
    value: function rescale() {
      this.interpolator = null;
      return this;
    }
  }, {
    key: "getValue",
    value: function getValue(x) {
      var domain = this.domain, range = this.range;
      return (this.interpolator || (this.interpolator = this.createInterpolator(domain, range)))(+x);
    }
  }, {
    key: "setDomain",
    value: function setDomain(val) {
      this.domain = [val[0], val[1]];
      this.rescale();
      return this;
    }
  }, {
    key: "getDomain",
    value: function getDomain() {
      return this.domain;
    }
  }, {
    key: "setRange",
    value: function setRange(val) {
      this.range = [val[0], val[1]];
      return this;
    }
  }, {
    key: "getRange",
    value: function getRange() {
      return this.range;
    }
  }, {
    key: "getTicks",
    value: function getTicks(count2) {
      var d = this.domain;
      return ticks_default(d[0], d[d.length - 1], count2 ? count2 : 10);
    }
  }]);
  return LinearScale2;
}();
var defaultGetEventData$1 = function defaultGetEventData() {
  return {
    value: 0,
    percent: 0
  };
};
var Ticks = function(_Component) {
  _inherits(Ticks2, _Component);
  var _super = _createSuper(Ticks2);
  function Ticks2() {
    _classCallCheck(this, Ticks2);
    return _super.apply(this, arguments);
  }
  _createClass(Ticks2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, children = _this$props.children, values = _this$props.values, _this$props$scale = _this$props.scale, scale = _this$props$scale === void 0 ? new LinearScale() : _this$props$scale, _this$props$count = _this$props.count, count2 = _this$props$count === void 0 ? 10 : _this$props$count, _this$props$getEventD = _this$props.getEventData, getEventData = _this$props$getEventD === void 0 ? defaultGetEventData$1 : _this$props$getEventD, _this$props$activeHan = _this$props.activeHandleID, activeHandleID = _this$props$activeHan === void 0 ? "" : _this$props$activeHan;
      var ticks = (values ? values : scale.getTicks(count2)).map(function(value) {
        return {
          id: "$$-".concat(value),
          value,
          percent: scale.getValue(value)
        };
      });
      var renderedChildren = children({
        getEventData,
        activeHandleID,
        ticks
      });
      return renderedChildren && import_react.default.Children.only(renderedChildren);
    }
  }]);
  return Ticks2;
}(import_react.Component);
var defaultGetEventData2 = function defaultGetEventData3() {
  return {
    value: 0,
    percent: 0
  };
};
var Tracks = function(_Component) {
  _inherits(Tracks2, _Component);
  var _super = _createSuper(Tracks2);
  function Tracks2() {
    var _this;
    _classCallCheck(this, Tracks2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.getTrackProps = function(props) {
      var _this$props = _this.props, emitMouse = _this$props.emitMouse, emitTouch = _this$props.emitTouch;
      return _objectSpread2(_objectSpread2({}, props || {}), {}, {
        onMouseDown: callAll(props && props.onMouseDown, emitMouse),
        onTouchStart: callAll(props && props.onTouchStart, emitTouch)
      });
    };
    return _this;
  }
  _createClass(Tracks2, [{
    key: "render",
    value: function render() {
      var getTrackProps = this.getTrackProps, _this$props2 = this.props, children = _this$props2.children, _this$props2$left = _this$props2.left, left = _this$props2$left === void 0 ? true : _this$props2$left, _this$props2$right = _this$props2.right, right = _this$props2$right === void 0 ? true : _this$props2$right, _this$props2$scale = _this$props2.scale, scale = _this$props2$scale === void 0 ? new LinearScale() : _this$props2$scale, _this$props2$handles = _this$props2.handles, handles = _this$props2$handles === void 0 ? [] : _this$props2$handles, _this$props2$getEvent = _this$props2.getEventData, getEventData = _this$props2$getEvent === void 0 ? defaultGetEventData2 : _this$props2$getEvent, _this$props2$activeHa = _this$props2.activeHandleID, activeHandleID = _this$props2$activeHa === void 0 ? "" : _this$props2$activeHa;
      var domain = scale.getDomain();
      var tracks = [];
      for (var i = 0; i < handles.length + 1; i++) {
        var source = handles[i - 1];
        var target = handles[i];
        if (i === 0 && left === true) {
          source = {
            id: "$",
            value: domain[0],
            percent: 0
          };
        } else if (i === handles.length && right === true) {
          target = {
            id: "$",
            value: domain[1],
            percent: 100
          };
        }
        if (source && target) {
          tracks.push({
            id: "".concat(source.id, "-").concat(target.id),
            source,
            target
          });
        }
      }
      var renderedChildren = children({
        getEventData,
        activeHandleID,
        tracks,
        getTrackProps
      });
      return renderedChildren && import_react.default.Children.only(renderedChildren);
    }
  }]);
  return Tracks2;
}(import_react.Component);
function clamp(value, min2, max2) {
  return Math.min(Math.max(value, min2), max2);
}
var DiscreteScale = _createClass(function DiscreteScale2() {
  var _this = this;
  _classCallCheck(this, DiscreteScale2);
  this.step = 1;
  this.domain = [0, 1];
  this.range = [0, 1];
  this.setDomain = function(val) {
    _this.domain = [val[0], val[1]];
    return _this;
  };
  this.setRange = function(val) {
    _this.range = [val[0], val[1]];
    return _this;
  };
  this.setStep = function(val) {
    _this.step = val;
    return _this;
  };
  this.getValue = function(x) {
    var _this$domain = _slicedToArray(_this.domain, 2), d0 = _this$domain[0], d1 = _this$domain[1], _this$range = _slicedToArray(_this.range, 2), r0 = _this$range[0], r1 = _this$range[1], step = _this.step;
    var p = (clamp(x, d0, d1) - d0) / (d1 - d0);
    var b = step * Math.round(p * (r1 - r0) / step) + r0;
    return clamp(b, r0 < r1 ? r0 : r1, r1 > r0 ? r1 : r0);
  };
});
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
var noop = function noop2() {
};
var compare = function compare2(b) {
  return function(m, d, i) {
    return m && b[i] === d;
  };
};
var equal = function equal2(a, b) {
  return a === b || a.length === b.length && a.reduce(compare(b), true);
};
var isRCSComponent = function isRCSComponent2(item) {
  if (!(0, import_react.isValidElement)(item)) {
    return false;
  }
  var type = item.type;
  var name = type ? type.name : "";
  return name === Handles.name || name === Rail.name || name === Ticks.name || name === Tracks.name;
};
var getNextValue = function getNextValue2(curr, step, domain, reversed) {
  var newVal = reversed ? curr - step : curr + step;
  return reversed ? Math.max(domain[0], newVal) : Math.min(domain[1], newVal);
};
var getPrevValue = function getPrevValue2(curr, step, domain, reversed) {
  var newVal = reversed ? curr + step : curr - step;
  return reversed ? Math.min(domain[1], newVal) : Math.max(domain[0], newVal);
};
var defaultDomain = [0, 100];
var Slider = function(_PureComponent) {
  _inherits(Slider2, _PureComponent);
  var _super = _createSuper(Slider2);
  function Slider2() {
    var _this;
    _classCallCheck(this, Slider2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      step: 0.1,
      values: [],
      domain: defaultDomain,
      handles: [],
      reversed: false,
      activeHandleID: "",
      valueToPerc: null,
      valueToStep: null,
      pixelToStep: null
    };
    _this.slider = import_react.default.createRef();
    _this.onKeyDown = function(e, handleID) {
      var validUpKeys = ["ArrowRight", "ArrowUp"];
      var validDownKeys = ["ArrowDown", "ArrowLeft"];
      var _assertThisInitialize = _assertThisInitialized(_this), handles = _assertThisInitialize.state.handles, _assertThisInitialize2 = _assertThisInitialize.props, _assertThisInitialize3 = _assertThisInitialize2.step, step = _assertThisInitialize3 === void 0 ? 0.1 : _assertThisInitialize3, _assertThisInitialize4 = _assertThisInitialize2.reversed, reversed = _assertThisInitialize4 === void 0 ? false : _assertThisInitialize4, _assertThisInitialize5 = _assertThisInitialize2.vertical, vertical = _assertThisInitialize5 === void 0 ? false : _assertThisInitialize5, _assertThisInitialize6 = _assertThisInitialize2.domain, domain = _assertThisInitialize6 === void 0 ? [0, 100] : _assertThisInitialize6;
      var key = e.key || "".concat(e.keyCode);
      if (!validUpKeys.concat(validDownKeys).includes(key)) {
        return;
      }
      if (vertical) {
        var _ref = [validDownKeys, validUpKeys];
        validUpKeys = _ref[0];
        validDownKeys = _ref[1];
      }
      e.stopPropagation && e.stopPropagation();
      e.preventDefault && e.preventDefault();
      var found = handles.find(function(value) {
        return value.key === handleID;
      });
      if (!found) {
        return;
      }
      var currVal = found.val;
      var newVal = currVal;
      if (validUpKeys.includes(key)) {
        newVal = getNextValue(currVal, step, domain, reversed);
      } else if (validDownKeys.includes(key)) {
        newVal = getPrevValue(currVal, step, domain, reversed);
      }
      var nextHandles = handles.map(function(v) {
        return v.key === handleID ? {
          key: v.key,
          val: newVal
        } : v;
      });
      _this.submitUpdate(nextHandles, true);
    };
    _this.onMouseDown = function(e, handleID) {
      _this.onStart(e, handleID, false);
    };
    _this.onTouchStart = function(e, handleID) {
      if (isNotValidTouch(e)) {
        return;
      }
      _this.onStart(e, handleID, true);
    };
    _this.getEventData = function(e, isTouch) {
      var _assertThisInitialize7 = _assertThisInitialized(_this), _assertThisInitialize8 = _assertThisInitialize7.state, pixelToStep = _assertThisInitialize8.pixelToStep, valueToPerc = _assertThisInitialize8.valueToPerc, vertical = _assertThisInitialize7.props.vertical;
      pixelToStep.setDomain(getSliderDomain(_this.slider.current, vertical));
      var value;
      if (isTouch && e instanceof TouchEvent) {
        value = pixelToStep.getValue(getTouchPosition(vertical, e));
      } else if (e instanceof MouseEvent) {
        value = pixelToStep.getValue(vertical ? e.clientY : e.pageX);
      }
      return {
        value,
        percent: valueToPerc.getValue(value)
      };
    };
    _this.onMouseMove = function(e) {
      var _assertThisInitialize9 = _assertThisInitialized(_this), _assertThisInitialize10 = _assertThisInitialize9.state, curr = _assertThisInitialize10.handles, pixelToStep = _assertThisInitialize10.pixelToStep, _assertThisInitialize11 = _assertThisInitialize10.activeHandleID, activeHandleID = _assertThisInitialize11 === void 0 ? "" : _assertThisInitialize11, _assertThisInitialize12 = _assertThisInitialize9.props, vertical = _assertThisInitialize12.vertical, _assertThisInitialize13 = _assertThisInitialize12.reversed, reversed = _assertThisInitialize13 === void 0 ? false : _assertThisInitialize13;
      pixelToStep.setDomain(getSliderDomain(_this.slider.current, vertical));
      var updateValue = pixelToStep.getValue(vertical ? e.clientY : e.pageX);
      var nextHandles = getUpdatedHandles(curr, activeHandleID, updateValue, reversed);
      _this.submitUpdate(nextHandles);
    };
    _this.onTouchMove = function(e) {
      var _assertThisInitialize14 = _assertThisInitialized(_this), _assertThisInitialize15 = _assertThisInitialize14.state, curr = _assertThisInitialize15.handles, pixelToStep = _assertThisInitialize15.pixelToStep, activeHandleID = _assertThisInitialize15.activeHandleID, _assertThisInitialize16 = _assertThisInitialize14.props, vertical = _assertThisInitialize16.vertical, reversed = _assertThisInitialize16.reversed;
      if (pixelToStep === null || isNotValidTouch(e)) {
        return;
      }
      pixelToStep.setDomain(getSliderDomain(_this.slider.current, vertical));
      var updateValue = pixelToStep.getValue(getTouchPosition(vertical, e));
      var nextHandles = getUpdatedHandles(curr, activeHandleID, updateValue, reversed);
      _this.submitUpdate(nextHandles);
    };
    _this.onMouseUp = function() {
      var _assertThisInitialize17 = _assertThisInitialized(_this), _assertThisInitialize18 = _assertThisInitialize17.state, _assertThisInitialize19 = _assertThisInitialize18.handles, handles = _assertThisInitialize19 === void 0 ? [] : _assertThisInitialize19, activeHandleID = _assertThisInitialize18.activeHandleID, _assertThisInitialize20 = _assertThisInitialize17.props, _assertThisInitialize21 = _assertThisInitialize20.onChange, onChange = _assertThisInitialize21 === void 0 ? noop : _assertThisInitialize21, _assertThisInitialize22 = _assertThisInitialize20.onSlideEnd, onSlideEnd = _assertThisInitialize22 === void 0 ? noop : _assertThisInitialize22;
      onChange(handles.map(function(d) {
        return d.val;
      }));
      onSlideEnd(handles.map(function(d) {
        return d.val;
      }), {
        activeHandleID
      });
      _this.setState({
        activeHandleID: ""
      });
      if (isBrowser) {
        document.removeEventListener("mousemove", _this.onMouseMove);
        document.removeEventListener("mouseup", _this.onMouseUp);
      }
    };
    _this.onTouchEnd = function() {
      var _assertThisInitialize23 = _assertThisInitialized(_this), _assertThisInitialize24 = _assertThisInitialize23.state, handles = _assertThisInitialize24.handles, activeHandleID = _assertThisInitialize24.activeHandleID, _assertThisInitialize25 = _assertThisInitialize23.props, _assertThisInitialize26 = _assertThisInitialize25.onChange, onChange = _assertThisInitialize26 === void 0 ? noop : _assertThisInitialize26, _assertThisInitialize27 = _assertThisInitialize25.onSlideEnd, onSlideEnd = _assertThisInitialize27 === void 0 ? noop : _assertThisInitialize27;
      onChange(handles.map(function(d) {
        return d.val;
      }));
      onSlideEnd(handles.map(function(d) {
        return d.val;
      }), {
        activeHandleID
      });
      _this.setState({
        activeHandleID: ""
      });
      if (isBrowser) {
        document.removeEventListener("touchmove", _this.onTouchMove);
        document.removeEventListener("touchend", _this.onTouchEnd);
      }
    };
    return _this;
  }
  _createClass(Slider2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var pixelToStep = this.state.pixelToStep;
      var vertical = this.props.vertical;
      pixelToStep.setDomain(getSliderDomain(this.slider.current, vertical));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeListeners();
    }
  }, {
    key: "removeListeners",
    value: function removeListeners() {
      if (isBrowser) {
        document.removeEventListener("mousemove", this.onMouseMove);
        document.removeEventListener("mouseup", this.onMouseUp);
        document.removeEventListener("touchmove", this.onTouchMove);
        document.removeEventListener("touchend", this.onTouchEnd);
      }
    }
  }, {
    key: "onStart",
    value: function onStart(e, handleID, isTouch) {
      var handles = this.state.handles, _this$props$onSlideSt = this.props.onSlideStart, onSlideStart = _this$props$onSlideSt === void 0 ? noop : _this$props$onSlideSt;
      if (!isTouch) {
        e.preventDefault && e.preventDefault();
      }
      e.stopPropagation && e.stopPropagation();
      var found = handles.find(function(value) {
        return value.key === handleID;
      });
      if (found) {
        this.setState({
          activeHandleID: handleID
        });
        onSlideStart(handles.map(function(d) {
          return d.val;
        }), {
          activeHandleID: handleID
        });
        isTouch ? this.addTouchEvents() : this.addMouseEvents();
      } else {
        this.setState({
          activeHandleID: ""
        });
        this.handleRailAndTrackClicks(e, isTouch);
      }
    }
  }, {
    key: "handleRailAndTrackClicks",
    value: function handleRailAndTrackClicks(e, isTouch) {
      var _this2 = this;
      var _this$state = this.state, curr = _this$state.handles, pixelToStep = _this$state.pixelToStep, _this$props = this.props, vertical = _this$props.vertical, _this$props$reversed = _this$props.reversed, reversed = _this$props$reversed === void 0 ? false : _this$props$reversed;
      var slider = this.slider;
      pixelToStep.setDomain(getSliderDomain(slider.current, vertical));
      var updateValue;
      if (isTouch) {
        updateValue = pixelToStep.getValue(getTouchPosition(vertical, e));
      } else {
        updateValue = pixelToStep.getValue(vertical ? e.clientY : e.pageX);
      }
      var updateKey = "";
      var minDiff = Infinity;
      for (var i = 0; i < curr.length; i++) {
        var _curr$i = curr[i], key = _curr$i.key, val = _curr$i.val;
        var diff = Math.abs(val - updateValue);
        if (diff < minDiff) {
          updateKey = key;
          minDiff = diff;
        }
      }
      var nextHandles = getUpdatedHandles(curr, updateKey, updateValue, reversed);
      this.setState({
        activeHandleID: updateKey
      }, function() {
        _this2.submitUpdate(nextHandles, true);
        isTouch ? _this2.addTouchEvents() : _this2.addMouseEvents();
      });
    }
  }, {
    key: "addMouseEvents",
    value: function addMouseEvents() {
      if (isBrowser) {
        document.addEventListener("mousemove", this.onMouseMove);
        document.addEventListener("mouseup", this.onMouseUp);
      }
    }
  }, {
    key: "addTouchEvents",
    value: function addTouchEvents() {
      if (isBrowser) {
        document.addEventListener("touchmove", this.onTouchMove);
        document.addEventListener("touchend", this.onTouchEnd);
      }
    }
  }, {
    key: "submitUpdate",
    value: function submitUpdate(next) {
      var callOnChange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var _this$props2 = this.props, _this$props2$mode = _this$props2.mode, mode = _this$props2$mode === void 0 ? 1 : _this$props2$mode, _this$props2$step = _this$props2.step, step = _this$props2$step === void 0 ? 0.1 : _this$props2$step, _this$props2$onUpdate = _this$props2.onUpdate, onUpdate = _this$props2$onUpdate === void 0 ? noop : _this$props2$onUpdate, _this$props2$onChange = _this$props2.onChange, onChange = _this$props2$onChange === void 0 ? noop : _this$props2$onChange, _this$props2$reversed = _this$props2.reversed, reversed = _this$props2$reversed === void 0 ? false : _this$props2$reversed;
      var getValue = this.state.valueToStep.getValue;
      this.setState(function(_ref2) {
        var curr = _ref2.handles;
        var handles = [];
        if (typeof mode === "function") {
          handles = mode(curr, next, step, reversed, getValue);
          (0, import_warning.default)(Array.isArray(handles), "Custom mode function did not return an array.");
        } else {
          switch (mode) {
            case 1:
              handles = mode1(curr, next);
              break;
            case 2:
              handles = mode2(curr, next);
              break;
            case 3:
              handles = mode3(curr, next, step, reversed, getValue);
              break;
            default:
              handles = next;
              (0, import_warning.default)(false, "".concat(prfx, " Invalid mode value."));
          }
        }
        onUpdate(handles.map(function(d) {
          return d.val;
        }));
        if (callOnChange) {
          onChange(handles.map(function(d) {
            return d.val;
          }));
        }
        return {
          handles
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$state2 = this.state, handles = _this$state2.handles, valueToPerc = _this$state2.valueToPerc, activeHandleID = _this$state2.activeHandleID, _this$props3 = this.props, className = _this$props3.className, _this$props3$rootStyl = _this$props3.rootStyle, rootStyle = _this$props3$rootStyl === void 0 ? {} : _this$props3$rootStyl, _this$props3$rootProp = _this$props3.rootProps, rootProps = _this$props3$rootProp === void 0 ? {} : _this$props3$rootProp, _this$props3$componen = _this$props3.component, Comp = _this$props3$componen === void 0 ? "div" : _this$props3$componen, _this$props3$disabled = _this$props3.disabled, disabled = _this$props3$disabled === void 0 ? false : _this$props3$disabled, _this$props3$flatten = _this$props3.flatten, flatten = _this$props3$flatten === void 0 ? false : _this$props3$flatten;
      var mappedHandles = handles.map(function(_ref3) {
        var key = _ref3.key, val = _ref3.val;
        return {
          id: key,
          value: val,
          percent: valueToPerc.getValue(val)
        };
      });
      var children = import_react.default.Children.map(this.props.children, function(child) {
        if (isRCSComponent(child) === true) {
          return import_react.default.cloneElement(child, {
            scale: valueToPerc,
            handles: mappedHandles,
            activeHandleID,
            getEventData: _this3.getEventData,
            emitKeyboard: disabled ? noop : _this3.onKeyDown,
            emitMouse: disabled ? noop : _this3.onMouseDown,
            emitTouch: disabled ? noop : _this3.onTouchStart
          });
        } else {
          return child;
        }
      });
      return flatten ? import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(Comp, _objectSpread2(_objectSpread2({}, rootProps), {}, {
        style: rootStyle,
        className,
        ref: this.slider
      })), children) : import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(Comp, _objectSpread2(_objectSpread2({}, rootProps), {}, {
        style: rootStyle,
        className,
        ref: this.slider
      }), children));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var _nextProps$step = nextProps.step, step = _nextProps$step === void 0 ? 0.1 : _nextProps$step, values = nextProps.values, _nextProps$domain = nextProps.domain, domain = _nextProps$domain === void 0 ? defaultDomain : _nextProps$domain, _nextProps$reversed = nextProps.reversed, reversed = _nextProps$reversed === void 0 ? false : _nextProps$reversed, _nextProps$onUpdate = nextProps.onUpdate, onUpdate = _nextProps$onUpdate === void 0 ? noop : _nextProps$onUpdate, _nextProps$onChange = nextProps.onChange, onChange = _nextProps$onChange === void 0 ? noop : _nextProps$onChange, _nextProps$warnOnChan = nextProps.warnOnChanges, warnOnChanges = _nextProps$warnOnChan === void 0 ? false : _nextProps$warnOnChan;
      var valueToPerc = prevState.valueToPerc;
      var valueToStep = prevState.valueToStep;
      var pixelToStep = prevState.pixelToStep;
      var nextState = {};
      if (!valueToPerc || !valueToStep || !pixelToStep) {
        valueToPerc = new LinearScale();
        valueToStep = new DiscreteScale();
        pixelToStep = new DiscreteScale();
        nextState.valueToPerc = valueToPerc;
        nextState.valueToStep = valueToStep;
        nextState.pixelToStep = pixelToStep;
      }
      if (prevState.domain === defaultDomain || prevState.step === null || prevState.domain === null || prevState.reversed === null || step !== prevState.step || domain[0] !== prevState.domain[0] || domain[1] !== prevState.domain[1] || reversed !== prevState.reversed) {
        var _domain = _slicedToArray(domain, 2), min2 = _domain[0], max2 = _domain[1];
        valueToStep.setStep(step).setRange([min2, max2]).setDomain([min2, max2]);
        if (reversed === true) {
          valueToPerc.setDomain([min2, max2]).setRange([100, 0]);
          pixelToStep.setStep(step).setRange([max2, min2]);
        } else {
          valueToPerc.setDomain([min2, max2]).setRange([0, 100]);
          pixelToStep.setStep(step).setRange([min2, max2]);
        }
        (0, import_warning.default)(max2 > min2, "".concat(prfx, " Max must be greater than min (even if reversed). Max is ").concat(max2, ". Min is ").concat(min2, "."));
        var _getHandles = getHandles(values || prevState.values, reversed, valueToStep, warnOnChanges), handles = _getHandles.handles, changes = _getHandles.changes;
        if (changes || values === void 0 || values === prevState.values) {
          onUpdate(handles.map(function(d) {
            return d.val;
          }));
          onChange(handles.map(function(d) {
            return d.val;
          }));
        }
        nextState.step = step;
        nextState.values = values;
        nextState.domain = domain === defaultDomain ? _toConsumableArray(domain) : domain;
        nextState.handles = handles;
        nextState.reversed = reversed;
      } else if (!equal(values, prevState.values)) {
        var _getHandles2 = getHandles(values, reversed, valueToStep, warnOnChanges), _handles = _getHandles2.handles, _changes = _getHandles2.changes;
        if (_changes) {
          onUpdate(_handles.map(function(d) {
            return d.val;
          }));
          onChange(_handles.map(function(d) {
            return d.val;
          }));
        }
        nextState.values = values;
        nextState.handles = _handles;
      }
      if (Object.keys(nextState).length) {
        return nextState;
      }
      return null;
    }
  }]);
  return Slider2;
}(import_react.PureComponent);
export {
  Handles,
  Rail,
  Slider,
  Ticks,
  Tracks,
  mode1,
  mode2,
  mode3
};
//# sourceMappingURL=react-compound-slider.js.map
