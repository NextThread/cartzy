import {
  Select,
  _classCallCheck,
  _createClass,
  _createSuper,
  _inherits,
  _objectSpread2,
  _toConsumableArray,
  cleanValue,
  getOptionLabel,
  getOptionValue,
  manageState,
  require_AutosizeInput
} from "./chunk-QI7FSUKL.js";
import "./chunk-7SVCUSNJ.js";
import {
  _extends
} from "./chunk-GCEFSD4J.js";
import "./chunk-ISTGUBHS.js";
import "./chunk-7KI34APA.js";
import "./chunk-BFECVUPF.js";
import "./chunk-FXIKXRN7.js";
import {
  require_react_dom
} from "./chunk-5ZLBF45J.js";
import "./chunk-MQKXF4E2.js";
import "./chunk-7JEONS5U.js";
import "./chunk-YAPNFXHX.js";
import {
  require_react
} from "./chunk-FG7OBDXQ.js";
import "./chunk-UQHSJDYI.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/react-select/creatable/dist/react-select.esm.js
var import_react = __toESM(require_react());
var import_react_input_autosize = __toESM(require_AutosizeInput());
var import_react_dom = __toESM(require_react_dom());
var compareOption = function compareOption2() {
  var inputValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var option = arguments.length > 1 ? arguments[1] : void 0;
  var accessors = arguments.length > 2 ? arguments[2] : void 0;
  var candidate = String(inputValue).toLowerCase();
  var optionValue = String(accessors.getOptionValue(option)).toLowerCase();
  var optionLabel = String(accessors.getOptionLabel(option)).toLowerCase();
  return optionValue === candidate || optionLabel === candidate;
};
var builtins = {
  formatCreateLabel: function formatCreateLabel(inputValue) {
    return 'Create "'.concat(inputValue, '"');
  },
  isValidNewOption: function isValidNewOption(inputValue, selectValue, selectOptions, accessors) {
    return !(!inputValue || selectValue.some(function(option) {
      return compareOption(inputValue, option, accessors);
    }) || selectOptions.some(function(option) {
      return compareOption(inputValue, option, accessors);
    }));
  },
  getNewOptionData: function getNewOptionData(inputValue, optionLabel) {
    return {
      label: optionLabel,
      value: inputValue,
      __isNew__: true
    };
  },
  getOptionValue,
  getOptionLabel
};
var defaultProps = _objectSpread2({
  allowCreateWhileLoading: false,
  createOptionPosition: "last"
}, builtins);
var makeCreatableSelect = function makeCreatableSelect2(SelectComponent) {
  var _class, _temp;
  return _temp = _class = function(_Component) {
    _inherits(Creatable2, _Component);
    var _super = _createSuper(Creatable2);
    function Creatable2(props) {
      var _this;
      _classCallCheck(this, Creatable2);
      _this = _super.call(this, props);
      _this.select = void 0;
      _this.onChange = function(newValue, actionMeta) {
        var _this$props = _this.props, getNewOptionData2 = _this$props.getNewOptionData, inputValue = _this$props.inputValue, isMulti = _this$props.isMulti, onChange = _this$props.onChange, onCreateOption = _this$props.onCreateOption, value = _this$props.value, name = _this$props.name;
        if (actionMeta.action !== "select-option") {
          return onChange(newValue, actionMeta);
        }
        var newOption = _this.state.newOption;
        var valueArray = Array.isArray(newValue) ? newValue : [newValue];
        if (valueArray[valueArray.length - 1] === newOption) {
          if (onCreateOption)
            onCreateOption(inputValue);
          else {
            var newOptionData = getNewOptionData2(inputValue, inputValue);
            var newActionMeta = {
              action: "create-option",
              name,
              option: newOptionData
            };
            if (isMulti) {
              onChange([].concat(_toConsumableArray(cleanValue(value)), [newOptionData]), newActionMeta);
            } else {
              onChange(newOptionData, newActionMeta);
            }
          }
          return;
        }
        onChange(newValue, actionMeta);
      };
      var options = props.options || [];
      _this.state = {
        newOption: void 0,
        options
      };
      return _this;
    }
    _createClass(Creatable2, [{
      key: "focus",
      value: function focus() {
        this.select.focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.select.blur();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        var options = this.state.options;
        return import_react.default.createElement(SelectComponent, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2.select = _ref;
          },
          options,
          onChange: this.onChange
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        var allowCreateWhileLoading = props.allowCreateWhileLoading, createOptionPosition = props.createOptionPosition, formatCreateLabel2 = props.formatCreateLabel, getNewOptionData2 = props.getNewOptionData, inputValue = props.inputValue, isLoading = props.isLoading, isValidNewOption2 = props.isValidNewOption, value = props.value, getOptionValue2 = props.getOptionValue, getOptionLabel2 = props.getOptionLabel;
        var options = props.options || [];
        var newOption = state.newOption;
        if (isValidNewOption2(inputValue, cleanValue(value), options, {
          getOptionValue: getOptionValue2,
          getOptionLabel: getOptionLabel2
        })) {
          newOption = getNewOptionData2(inputValue, formatCreateLabel2(inputValue));
        } else {
          newOption = void 0;
        }
        return {
          newOption,
          options: (allowCreateWhileLoading || !isLoading) && newOption ? createOptionPosition === "first" ? [newOption].concat(_toConsumableArray(options)) : [].concat(_toConsumableArray(options), [newOption]) : options
        };
      }
    }]);
    return Creatable2;
  }(import_react.Component), _class.defaultProps = defaultProps, _temp;
};
var SelectCreatable = makeCreatableSelect(Select);
var Creatable = manageState(SelectCreatable);
var react_select_esm_default = Creatable;

// dep:react-select_creatable
var react_select_creatable_default = react_select_esm_default;
export {
  react_select_creatable_default as default,
  defaultProps,
  makeCreatableSelect
};
//# sourceMappingURL=react-select_creatable.js.map
